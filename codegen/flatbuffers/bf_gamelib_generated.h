// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_
#define FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace BFGame {

struct Resource;
struct ResourceBuilder;

struct Construction_Resource_Pair;
struct Construction_Resource_PairBuilder;

struct Building;
struct BuildingBuilder;

struct Tile_State;

struct Tile_Rule;
struct Tile_RuleBuilder;

struct Art;
struct ArtBuilder;

struct UI;
struct UIBuilder;

struct Humans;
struct HumansBuilder;

struct Game_Library;
struct Game_LibraryBuilder;

enum Building_Type : int8_t {
  Building_Type_Undefined = 0,
  Building_Type_City_Hall = 1,
  Building_Type_Harvest = 2,
  Building_Type_Plant = 3,
  Building_Type_Fish = 4,
  Building_Type_Produce = 5,
  Building_Type_MIN = Building_Type_Undefined,
  Building_Type_MAX = Building_Type_Produce
};

inline const Building_Type (&EnumValuesBuilding_Type())[6] {
  static const Building_Type values[] = {
    Building_Type_Undefined,
    Building_Type_City_Hall,
    Building_Type_Harvest,
    Building_Type_Plant,
    Building_Type_Fish,
    Building_Type_Produce
  };
  return values;
}

inline const char * const *EnumNamesBuilding_Type() {
  static const char * const names[7] = {
    "Undefined",
    "City_Hall",
    "Harvest",
    "Plant",
    "Fish",
    "Produce",
    nullptr
  };
  return names;
}

inline const char *EnumNameBuilding_Type(Building_Type e) {
  if (::flatbuffers::IsOutRange(e, Building_Type_Undefined, Building_Type_Produce)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuilding_Type()[index];
}

enum Tile_State_Condition : int8_t {
  Tile_State_Condition_Skip = 0,
  Tile_State_Condition_Excluded = 1,
  Tile_State_Condition_Included = 2,
  Tile_State_Condition_MIN = Tile_State_Condition_Skip,
  Tile_State_Condition_MAX = Tile_State_Condition_Included
};

inline const Tile_State_Condition (&EnumValuesTile_State_Condition())[3] {
  static const Tile_State_Condition values[] = {
    Tile_State_Condition_Skip,
    Tile_State_Condition_Excluded,
    Tile_State_Condition_Included
  };
  return values;
}

inline const char * const *EnumNamesTile_State_Condition() {
  static const char * const names[4] = {
    "Skip",
    "Excluded",
    "Included",
    nullptr
  };
  return names;
}

inline const char *EnumNameTile_State_Condition(Tile_State_Condition e) {
  if (::flatbuffers::IsOutRange(e, Tile_State_Condition_Skip, Tile_State_Condition_Included)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTile_State_Condition()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Tile_State FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t texture_;
  int8_t condition_[8];

 public:
  Tile_State()
      : texture_(0),
        condition_() {
  }
  Tile_State(uint32_t _texture)
      : texture_(::flatbuffers::EndianScalar(_texture)),
        condition_() {
  }
  Tile_State(uint32_t _texture, ::flatbuffers::span<const BFGame::Tile_State_Condition, 8> _condition)
      : texture_(::flatbuffers::EndianScalar(_texture)) {
    ::flatbuffers::CastToArrayOfEnum<BFGame::Tile_State_Condition>(condition_).CopyFromSpan(_condition);
  }
  uint32_t texture() const {
    return ::flatbuffers::EndianScalar(texture_);
  }
  const ::flatbuffers::Array<BFGame::Tile_State_Condition, 8> *condition() const {
    return &::flatbuffers::CastToArrayOfEnum<BFGame::Tile_State_Condition>(condition_);
  }
};
FLATBUFFERS_STRUCT_END(Tile_State, 12);

struct Resource FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResourceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_TEXTURE = 6,
    VT_SMALL_TEXTURE = 8
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool KeyCompareLessThan(const Resource * const o) const {
    return *code() < *o->code();
  }
  int KeyCompareWithValue(const char *_code) const {
    return strcmp(code()->c_str(), _code);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _code) const {
    if (code()->c_str() < _code) return -1;
    if (_code < code()->c_str()) return 1;
    return 0;
  }
  uint32_t texture() const {
    return GetField<uint32_t>(VT_TEXTURE, 0);
  }
  uint32_t small_texture() const {
    return GetField<uint32_t>(VT_SMALL_TEXTURE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyField<uint32_t>(verifier, VT_TEXTURE, 4) &&
           VerifyField<uint32_t>(verifier, VT_SMALL_TEXTURE, 4) &&
           verifier.EndTable();
  }
};

struct ResourceBuilder {
  typedef Resource Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(Resource::VT_CODE, code);
  }
  void add_texture(uint32_t texture) {
    fbb_.AddElement<uint32_t>(Resource::VT_TEXTURE, texture, 0);
  }
  void add_small_texture(uint32_t small_texture) {
    fbb_.AddElement<uint32_t>(Resource::VT_SMALL_TEXTURE, small_texture, 0);
  }
  explicit ResourceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Resource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Resource>(end);
    fbb_.Required(o, Resource::VT_CODE);
    return o;
  }
};

inline ::flatbuffers::Offset<Resource> CreateResource(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    uint32_t texture = 0,
    uint32_t small_texture = 0) {
  ResourceBuilder builder_(_fbb);
  builder_.add_small_texture(small_texture);
  builder_.add_texture(texture);
  builder_.add_code(code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Resource> CreateResourceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    uint32_t texture = 0,
    uint32_t small_texture = 0) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  return BFGame::CreateResource(
      _fbb,
      code__,
      texture,
      small_texture);
}

struct Construction_Resource_Pair FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Construction_Resource_PairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESOURCE_CODE = 4,
    VT_COUNT = 6
  };
  const ::flatbuffers::String *resource_code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESOURCE_CODE);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_RESOURCE_CODE) &&
           verifier.VerifyString(resource_code()) &&
           VerifyField<int32_t>(verifier, VT_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct Construction_Resource_PairBuilder {
  typedef Construction_Resource_Pair Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_resource_code(::flatbuffers::Offset<::flatbuffers::String> resource_code) {
    fbb_.AddOffset(Construction_Resource_Pair::VT_RESOURCE_CODE, resource_code);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(Construction_Resource_Pair::VT_COUNT, count, 0);
  }
  explicit Construction_Resource_PairBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Construction_Resource_Pair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Construction_Resource_Pair>(end);
    fbb_.Required(o, Construction_Resource_Pair::VT_RESOURCE_CODE);
    return o;
  }
};

inline ::flatbuffers::Offset<Construction_Resource_Pair> CreateConstruction_Resource_Pair(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> resource_code = 0,
    int32_t count = 0) {
  Construction_Resource_PairBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_resource_code(resource_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Construction_Resource_Pair> CreateConstruction_Resource_PairDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *resource_code = nullptr,
    int32_t count = 0) {
  auto resource_code__ = resource_code ? _fbb.CreateString(resource_code) : 0;
  return BFGame::CreateConstruction_Resource_Pair(
      _fbb,
      resource_code__,
      count);
}

struct Building FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuildingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_TYPE = 6,
    VT_TEXTURE = 8,
    VT_HUMAN_SPAWNING_DELAY = 10,
    VT_CONSTRUCTION_POINTS = 12,
    VT_CAN_BE_BUILT = 14,
    VT_CONSTRUCTION_RESOURCES = 16
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool KeyCompareLessThan(const Building * const o) const {
    return *code() < *o->code();
  }
  int KeyCompareWithValue(const char *_code) const {
    return strcmp(code()->c_str(), _code);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _code) const {
    if (code()->c_str() < _code) return -1;
    if (_code < code()->c_str()) return 1;
    return 0;
  }
  BFGame::Building_Type type() const {
    return static_cast<BFGame::Building_Type>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t texture() const {
    return GetField<uint32_t>(VT_TEXTURE, 0);
  }
  float human_spawning_delay() const {
    return GetField<float>(VT_HUMAN_SPAWNING_DELAY, 0.0f);
  }
  float construction_points() const {
    return GetField<float>(VT_CONSTRUCTION_POINTS, 0.0f);
  }
  bool can_be_built() const {
    return GetField<uint8_t>(VT_CAN_BE_BUILT, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *construction_resources() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *>(VT_CONSTRUCTION_RESOURCES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_TEXTURE, 4) &&
           VerifyField<float>(verifier, VT_HUMAN_SPAWNING_DELAY, 4) &&
           VerifyField<float>(verifier, VT_CONSTRUCTION_POINTS, 4) &&
           VerifyField<uint8_t>(verifier, VT_CAN_BE_BUILT, 1) &&
           VerifyOffset(verifier, VT_CONSTRUCTION_RESOURCES) &&
           verifier.VerifyVector(construction_resources()) &&
           verifier.VerifyVectorOfTables(construction_resources()) &&
           verifier.EndTable();
  }
};

struct BuildingBuilder {
  typedef Building Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(Building::VT_CODE, code);
  }
  void add_type(BFGame::Building_Type type) {
    fbb_.AddElement<int8_t>(Building::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_texture(uint32_t texture) {
    fbb_.AddElement<uint32_t>(Building::VT_TEXTURE, texture, 0);
  }
  void add_human_spawning_delay(float human_spawning_delay) {
    fbb_.AddElement<float>(Building::VT_HUMAN_SPAWNING_DELAY, human_spawning_delay, 0.0f);
  }
  void add_construction_points(float construction_points) {
    fbb_.AddElement<float>(Building::VT_CONSTRUCTION_POINTS, construction_points, 0.0f);
  }
  void add_can_be_built(bool can_be_built) {
    fbb_.AddElement<uint8_t>(Building::VT_CAN_BE_BUILT, static_cast<uint8_t>(can_be_built), 0);
  }
  void add_construction_resources(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>> construction_resources) {
    fbb_.AddOffset(Building::VT_CONSTRUCTION_RESOURCES, construction_resources);
  }
  explicit BuildingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Building> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Building>(end);
    fbb_.Required(o, Building::VT_CODE);
    return o;
  }
};

inline ::flatbuffers::Offset<Building> CreateBuilding(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    BFGame::Building_Type type = BFGame::Building_Type_Undefined,
    uint32_t texture = 0,
    float human_spawning_delay = 0.0f,
    float construction_points = 0.0f,
    bool can_be_built = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>> construction_resources = 0) {
  BuildingBuilder builder_(_fbb);
  builder_.add_construction_resources(construction_resources);
  builder_.add_construction_points(construction_points);
  builder_.add_human_spawning_delay(human_spawning_delay);
  builder_.add_texture(texture);
  builder_.add_code(code);
  builder_.add_can_be_built(can_be_built);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Building> CreateBuildingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    BFGame::Building_Type type = BFGame::Building_Type_Undefined,
    uint32_t texture = 0,
    float human_spawning_delay = 0.0f,
    float construction_points = 0.0f,
    bool can_be_built = false,
    const std::vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *construction_resources = nullptr) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto construction_resources__ = construction_resources ? _fbb.CreateVector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>(*construction_resources) : 0;
  return BFGame::CreateBuilding(
      _fbb,
      code__,
      type,
      texture,
      human_spawning_delay,
      construction_points,
      can_be_built,
      construction_resources__);
}

struct Tile_Rule FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Tile_RuleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFAULT_TEXTURE = 4,
    VT_STATES = 6
  };
  uint32_t default_texture() const {
    return GetField<uint32_t>(VT_DEFAULT_TEXTURE, 0);
  }
  const ::flatbuffers::Vector<const BFGame::Tile_State *> *states() const {
    return GetPointer<const ::flatbuffers::Vector<const BFGame::Tile_State *> *>(VT_STATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEFAULT_TEXTURE, 4) &&
           VerifyOffset(verifier, VT_STATES) &&
           verifier.VerifyVector(states()) &&
           verifier.EndTable();
  }
};

struct Tile_RuleBuilder {
  typedef Tile_Rule Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_default_texture(uint32_t default_texture) {
    fbb_.AddElement<uint32_t>(Tile_Rule::VT_DEFAULT_TEXTURE, default_texture, 0);
  }
  void add_states(::flatbuffers::Offset<::flatbuffers::Vector<const BFGame::Tile_State *>> states) {
    fbb_.AddOffset(Tile_Rule::VT_STATES, states);
  }
  explicit Tile_RuleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tile_Rule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tile_Rule>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tile_Rule> CreateTile_Rule(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t default_texture = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const BFGame::Tile_State *>> states = 0) {
  Tile_RuleBuilder builder_(_fbb);
  builder_.add_states(states);
  builder_.add_default_texture(default_texture);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Tile_Rule> CreateTile_RuleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t default_texture = 0,
    const std::vector<BFGame::Tile_State> *states = nullptr) {
  auto states__ = states ? _fbb.CreateVectorOfStructs<BFGame::Tile_State>(*states) : 0;
  return BFGame::CreateTile_Rule(
      _fbb,
      default_texture,
      states__);
}

struct Art FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArtBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HUMAN = 4,
    VT_GRASS = 6,
    VT_FOREST = 8,
    VT_BUILDING_IN_PROGRESS = 10,
    VT_ROAD = 12,
    VT_FLAG = 14,
    VT_UI = 16,
    VT_TILE_RULE_FOREST = 18,
    VT_TILE_RULE_GRASS = 20
  };
  uint32_t human() const {
    return GetField<uint32_t>(VT_HUMAN, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *grass() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_GRASS);
  }
  const ::flatbuffers::Vector<uint32_t> *forest() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_FOREST);
  }
  uint32_t building_in_progress() const {
    return GetField<uint32_t>(VT_BUILDING_IN_PROGRESS, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *road() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_ROAD);
  }
  const ::flatbuffers::Vector<uint32_t> *flag() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_FLAG);
  }
  const BFGame::UI *ui() const {
    return GetPointer<const BFGame::UI *>(VT_UI);
  }
  const BFGame::Tile_Rule *tile_rule_forest() const {
    return GetPointer<const BFGame::Tile_Rule *>(VT_TILE_RULE_FOREST);
  }
  const BFGame::Tile_Rule *tile_rule_grass() const {
    return GetPointer<const BFGame::Tile_Rule *>(VT_TILE_RULE_GRASS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_HUMAN, 4) &&
           VerifyOffset(verifier, VT_GRASS) &&
           verifier.VerifyVector(grass()) &&
           VerifyOffset(verifier, VT_FOREST) &&
           verifier.VerifyVector(forest()) &&
           VerifyField<uint32_t>(verifier, VT_BUILDING_IN_PROGRESS, 4) &&
           VerifyOffset(verifier, VT_ROAD) &&
           verifier.VerifyVector(road()) &&
           VerifyOffset(verifier, VT_FLAG) &&
           verifier.VerifyVector(flag()) &&
           VerifyOffset(verifier, VT_UI) &&
           verifier.VerifyTable(ui()) &&
           VerifyOffsetRequired(verifier, VT_TILE_RULE_FOREST) &&
           verifier.VerifyTable(tile_rule_forest()) &&
           VerifyOffsetRequired(verifier, VT_TILE_RULE_GRASS) &&
           verifier.VerifyTable(tile_rule_grass()) &&
           verifier.EndTable();
  }
};

struct ArtBuilder {
  typedef Art Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_human(uint32_t human) {
    fbb_.AddElement<uint32_t>(Art::VT_HUMAN, human, 0);
  }
  void add_grass(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> grass) {
    fbb_.AddOffset(Art::VT_GRASS, grass);
  }
  void add_forest(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> forest) {
    fbb_.AddOffset(Art::VT_FOREST, forest);
  }
  void add_building_in_progress(uint32_t building_in_progress) {
    fbb_.AddElement<uint32_t>(Art::VT_BUILDING_IN_PROGRESS, building_in_progress, 0);
  }
  void add_road(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> road) {
    fbb_.AddOffset(Art::VT_ROAD, road);
  }
  void add_flag(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> flag) {
    fbb_.AddOffset(Art::VT_FLAG, flag);
  }
  void add_ui(::flatbuffers::Offset<BFGame::UI> ui) {
    fbb_.AddOffset(Art::VT_UI, ui);
  }
  void add_tile_rule_forest(::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_forest) {
    fbb_.AddOffset(Art::VT_TILE_RULE_FOREST, tile_rule_forest);
  }
  void add_tile_rule_grass(::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_grass) {
    fbb_.AddOffset(Art::VT_TILE_RULE_GRASS, tile_rule_grass);
  }
  explicit ArtBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Art> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Art>(end);
    fbb_.Required(o, Art::VT_TILE_RULE_FOREST);
    fbb_.Required(o, Art::VT_TILE_RULE_GRASS);
    return o;
  }
};

inline ::flatbuffers::Offset<Art> CreateArt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t human = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> grass = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> forest = 0,
    uint32_t building_in_progress = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> road = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> flag = 0,
    ::flatbuffers::Offset<BFGame::UI> ui = 0,
    ::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_forest = 0,
    ::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_grass = 0) {
  ArtBuilder builder_(_fbb);
  builder_.add_tile_rule_grass(tile_rule_grass);
  builder_.add_tile_rule_forest(tile_rule_forest);
  builder_.add_ui(ui);
  builder_.add_flag(flag);
  builder_.add_road(road);
  builder_.add_building_in_progress(building_in_progress);
  builder_.add_forest(forest);
  builder_.add_grass(grass);
  builder_.add_human(human);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Art> CreateArtDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t human = 0,
    const std::vector<uint32_t> *grass = nullptr,
    const std::vector<uint32_t> *forest = nullptr,
    uint32_t building_in_progress = 0,
    const std::vector<uint32_t> *road = nullptr,
    const std::vector<uint32_t> *flag = nullptr,
    ::flatbuffers::Offset<BFGame::UI> ui = 0,
    ::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_forest = 0,
    ::flatbuffers::Offset<BFGame::Tile_Rule> tile_rule_grass = 0) {
  auto grass__ = grass ? _fbb.CreateVector<uint32_t>(*grass) : 0;
  auto forest__ = forest ? _fbb.CreateVector<uint32_t>(*forest) : 0;
  auto road__ = road ? _fbb.CreateVector<uint32_t>(*road) : 0;
  auto flag__ = flag ? _fbb.CreateVector<uint32_t>(*flag) : 0;
  return BFGame::CreateArt(
      _fbb,
      human,
      grass__,
      forest__,
      building_in_progress,
      road__,
      flag__,
      ui,
      tile_rule_forest,
      tile_rule_grass);
}

struct UI FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUILDABLES_PANEL = 4,
    VT_BUILDABLES_PLACEHOLDER = 6
  };
  uint32_t buildables_panel() const {
    return GetField<uint32_t>(VT_BUILDABLES_PANEL, 0);
  }
  uint32_t buildables_placeholder() const {
    return GetField<uint32_t>(VT_BUILDABLES_PLACEHOLDER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BUILDABLES_PANEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_BUILDABLES_PLACEHOLDER, 4) &&
           verifier.EndTable();
  }
};

struct UIBuilder {
  typedef UI Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_buildables_panel(uint32_t buildables_panel) {
    fbb_.AddElement<uint32_t>(UI::VT_BUILDABLES_PANEL, buildables_panel, 0);
  }
  void add_buildables_placeholder(uint32_t buildables_placeholder) {
    fbb_.AddElement<uint32_t>(UI::VT_BUILDABLES_PLACEHOLDER, buildables_placeholder, 0);
  }
  explicit UIBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UI>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UI> CreateUI(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t buildables_panel = 0,
    uint32_t buildables_placeholder = 0) {
  UIBuilder builder_(_fbb);
  builder_.add_buildables_placeholder(buildables_placeholder);
  builder_.add_buildables_panel(buildables_panel);
  return builder_.Finish();
}

struct Humans FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HumansBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOVING_ONE_TILE_DURATION = 4,
    VT_PICKING_UP_DURATION = 6,
    VT_PLACING_DURATION = 8
  };
  float moving_one_tile_duration() const {
    return GetField<float>(VT_MOVING_ONE_TILE_DURATION, 0.0f);
  }
  float picking_up_duration() const {
    return GetField<float>(VT_PICKING_UP_DURATION, 0.0f);
  }
  float placing_duration() const {
    return GetField<float>(VT_PLACING_DURATION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_MOVING_ONE_TILE_DURATION, 4) &&
           VerifyField<float>(verifier, VT_PICKING_UP_DURATION, 4) &&
           VerifyField<float>(verifier, VT_PLACING_DURATION, 4) &&
           verifier.EndTable();
  }
};

struct HumansBuilder {
  typedef Humans Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_moving_one_tile_duration(float moving_one_tile_duration) {
    fbb_.AddElement<float>(Humans::VT_MOVING_ONE_TILE_DURATION, moving_one_tile_duration, 0.0f);
  }
  void add_picking_up_duration(float picking_up_duration) {
    fbb_.AddElement<float>(Humans::VT_PICKING_UP_DURATION, picking_up_duration, 0.0f);
  }
  void add_placing_duration(float placing_duration) {
    fbb_.AddElement<float>(Humans::VT_PLACING_DURATION, placing_duration, 0.0f);
  }
  explicit HumansBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Humans> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Humans>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Humans> CreateHumans(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float moving_one_tile_duration = 0.0f,
    float picking_up_duration = 0.0f,
    float placing_duration = 0.0f) {
  HumansBuilder builder_(_fbb);
  builder_.add_placing_duration(placing_duration);
  builder_.add_picking_up_duration(picking_up_duration);
  builder_.add_moving_one_tile_duration(moving_one_tile_duration);
  return builder_.Finish();
}

struct Game_Library FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Game_LibraryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HUMANS = 4,
    VT_BUILDINGS = 6,
    VT_RESOURCES = 8,
    VT_ART = 10
  };
  const BFGame::Humans *humans() const {
    return GetPointer<const BFGame::Humans *>(VT_HUMANS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>> *buildings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>> *>(VT_BUILDINGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>> *resources() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>> *>(VT_RESOURCES);
  }
  const BFGame::Art *art() const {
    return GetPointer<const BFGame::Art *>(VT_ART);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HUMANS) &&
           verifier.VerifyTable(humans()) &&
           VerifyOffset(verifier, VT_BUILDINGS) &&
           verifier.VerifyVector(buildings()) &&
           verifier.VerifyVectorOfTables(buildings()) &&
           VerifyOffset(verifier, VT_RESOURCES) &&
           verifier.VerifyVector(resources()) &&
           verifier.VerifyVectorOfTables(resources()) &&
           VerifyOffset(verifier, VT_ART) &&
           verifier.VerifyTable(art()) &&
           verifier.EndTable();
  }
};

struct Game_LibraryBuilder {
  typedef Game_Library Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_humans(::flatbuffers::Offset<BFGame::Humans> humans) {
    fbb_.AddOffset(Game_Library::VT_HUMANS, humans);
  }
  void add_buildings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>>> buildings) {
    fbb_.AddOffset(Game_Library::VT_BUILDINGS, buildings);
  }
  void add_resources(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>>> resources) {
    fbb_.AddOffset(Game_Library::VT_RESOURCES, resources);
  }
  void add_art(::flatbuffers::Offset<BFGame::Art> art) {
    fbb_.AddOffset(Game_Library::VT_ART, art);
  }
  explicit Game_LibraryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Game_Library> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Game_Library>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Game_Library> CreateGame_Library(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BFGame::Humans> humans = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>>> buildings = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>>> resources = 0,
    ::flatbuffers::Offset<BFGame::Art> art = 0) {
  Game_LibraryBuilder builder_(_fbb);
  builder_.add_art(art);
  builder_.add_resources(resources);
  builder_.add_buildings(buildings);
  builder_.add_humans(humans);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Game_Library> CreateGame_LibraryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BFGame::Humans> humans = 0,
    std::vector<::flatbuffers::Offset<BFGame::Building>> *buildings = nullptr,
    std::vector<::flatbuffers::Offset<BFGame::Resource>> *resources = nullptr,
    ::flatbuffers::Offset<BFGame::Art> art = 0) {
  auto buildings__ = buildings ? _fbb.CreateVectorOfSortedTables<BFGame::Building>(buildings) : 0;
  auto resources__ = resources ? _fbb.CreateVectorOfSortedTables<BFGame::Resource>(resources) : 0;
  return BFGame::CreateGame_Library(
      _fbb,
      humans,
      buildings__,
      resources__,
      art);
}

inline const BFGame::Game_Library *GetGame_Library(const void *buf) {
  return ::flatbuffers::GetRoot<BFGame::Game_Library>(buf);
}

inline const BFGame::Game_Library *GetSizePrefixedGame_Library(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BFGame::Game_Library>(buf);
}

inline const char *Game_LibraryIdentifier() {
  return "GLIB";
}

inline bool Game_LibraryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Game_LibraryIdentifier());
}

inline bool SizePrefixedGame_LibraryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Game_LibraryIdentifier(), true);
}

inline bool VerifyGame_LibraryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BFGame::Game_Library>(Game_LibraryIdentifier());
}

inline bool VerifySizePrefixedGame_LibraryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BFGame::Game_Library>(Game_LibraryIdentifier());
}

inline void FinishGame_LibraryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BFGame::Game_Library> root) {
  fbb.Finish(root, Game_LibraryIdentifier());
}

inline void FinishSizePrefixedGame_LibraryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BFGame::Game_Library> root) {
  fbb.FinishSizePrefixed(root, Game_LibraryIdentifier());
}

}  // namespace BFGame

#endif  // FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_
