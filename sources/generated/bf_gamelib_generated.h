// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_
#define FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace BFGame {

struct Resource;
struct ResourceBuilder;

struct Construction_Resource_Pair;
struct Construction_Resource_PairBuilder;

struct Building;
struct BuildingBuilder;

struct Game_Library;
struct Game_LibraryBuilder;

enum Building_Type : int8_t {
  Building_Type_Undefined = 0,
  Building_Type_City_Hall = 1,
  Building_Type_Harvest = 2,
  Building_Type_Plant = 3,
  Building_Type_Fish = 4,
  Building_Type_Produce = 5,
  Building_Type_MIN = Building_Type_Undefined,
  Building_Type_MAX = Building_Type_Produce
};

inline const Building_Type (&EnumValuesBuilding_Type())[6] {
  static const Building_Type values[] = {
    Building_Type_Undefined,
    Building_Type_City_Hall,
    Building_Type_Harvest,
    Building_Type_Plant,
    Building_Type_Fish,
    Building_Type_Produce
  };
  return values;
}

inline const char * const *EnumNamesBuilding_Type() {
  static const char * const names[7] = {
    "Undefined",
    "City_Hall",
    "Harvest",
    "Plant",
    "Fish",
    "Produce",
    nullptr
  };
  return names;
}

inline const char *EnumNameBuilding_Type(Building_Type e) {
  if (::flatbuffers::IsOutRange(e, Building_Type_Undefined, Building_Type_Produce)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuilding_Type()[index];
}

struct Resource FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResourceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_TEXTURE = 6,
    VT_SMALL_TEXTURE = 8
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool KeyCompareLessThan(const Resource * const o) const {
    return *code() < *o->code();
  }
  int KeyCompareWithValue(const char *_code) const {
    return strcmp(code()->c_str(), _code);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _code) const {
    if (code()->c_str() < _code) return -1;
    if (_code < code()->c_str()) return 1;
    return 0;
  }
  const ::flatbuffers::String *texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXTURE);
  }
  const ::flatbuffers::String *small_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SMALL_TEXTURE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffsetRequired(verifier, VT_TEXTURE) &&
           verifier.VerifyString(texture()) &&
           VerifyOffsetRequired(verifier, VT_SMALL_TEXTURE) &&
           verifier.VerifyString(small_texture()) &&
           verifier.EndTable();
  }
};

struct ResourceBuilder {
  typedef Resource Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(Resource::VT_CODE, code);
  }
  void add_texture(::flatbuffers::Offset<::flatbuffers::String> texture) {
    fbb_.AddOffset(Resource::VT_TEXTURE, texture);
  }
  void add_small_texture(::flatbuffers::Offset<::flatbuffers::String> small_texture) {
    fbb_.AddOffset(Resource::VT_SMALL_TEXTURE, small_texture);
  }
  explicit ResourceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Resource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Resource>(end);
    fbb_.Required(o, Resource::VT_CODE);
    fbb_.Required(o, Resource::VT_TEXTURE);
    fbb_.Required(o, Resource::VT_SMALL_TEXTURE);
    return o;
  }
};

inline ::flatbuffers::Offset<Resource> CreateResource(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> texture = 0,
    ::flatbuffers::Offset<::flatbuffers::String> small_texture = 0) {
  ResourceBuilder builder_(_fbb);
  builder_.add_small_texture(small_texture);
  builder_.add_texture(texture);
  builder_.add_code(code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Resource> CreateResourceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    const char *texture = nullptr,
    const char *small_texture = nullptr) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto texture__ = texture ? _fbb.CreateString(texture) : 0;
  auto small_texture__ = small_texture ? _fbb.CreateString(small_texture) : 0;
  return BFGame::CreateResource(
      _fbb,
      code__,
      texture__,
      small_texture__);
}

struct Construction_Resource_Pair FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Construction_Resource_PairBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESOURCE_CODE = 4,
    VT_COUNT = 6
  };
  const ::flatbuffers::String *resource_code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESOURCE_CODE);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_RESOURCE_CODE) &&
           verifier.VerifyString(resource_code()) &&
           VerifyField<int32_t>(verifier, VT_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct Construction_Resource_PairBuilder {
  typedef Construction_Resource_Pair Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_resource_code(::flatbuffers::Offset<::flatbuffers::String> resource_code) {
    fbb_.AddOffset(Construction_Resource_Pair::VT_RESOURCE_CODE, resource_code);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(Construction_Resource_Pair::VT_COUNT, count, 0);
  }
  explicit Construction_Resource_PairBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Construction_Resource_Pair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Construction_Resource_Pair>(end);
    fbb_.Required(o, Construction_Resource_Pair::VT_RESOURCE_CODE);
    return o;
  }
};

inline ::flatbuffers::Offset<Construction_Resource_Pair> CreateConstruction_Resource_Pair(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> resource_code = 0,
    int32_t count = 0) {
  Construction_Resource_PairBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_resource_code(resource_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Construction_Resource_Pair> CreateConstruction_Resource_PairDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *resource_code = nullptr,
    int32_t count = 0) {
  auto resource_code__ = resource_code ? _fbb.CreateString(resource_code) : 0;
  return BFGame::CreateConstruction_Resource_Pair(
      _fbb,
      resource_code__,
      count);
}

struct Building FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuildingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_TYPE = 6,
    VT_TEXTURE = 8,
    VT_HUMAN_SPAWNING_DELAY = 10,
    VT_REQUIRED_CONSTRUCTION_POINTS = 12,
    VT_CONSTRUCTION_RESOURCES = 14
  };
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  bool KeyCompareLessThan(const Building * const o) const {
    return *code() < *o->code();
  }
  int KeyCompareWithValue(const char *_code) const {
    return strcmp(code()->c_str(), _code);
  }
  template<typename StringType>
  int KeyCompareWithValue(const StringType& _code) const {
    if (code()->c_str() < _code) return -1;
    if (_code < code()->c_str()) return 1;
    return 0;
  }
  BFGame::Building_Type type() const {
    return static_cast<BFGame::Building_Type>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXTURE);
  }
  float human_spawning_delay() const {
    return GetField<float>(VT_HUMAN_SPAWNING_DELAY, 0.0f);
  }
  float required_construction_points() const {
    return GetField<float>(VT_REQUIRED_CONSTRUCTION_POINTS, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *construction_resources() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *>(VT_CONSTRUCTION_RESOURCES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_TEXTURE) &&
           verifier.VerifyString(texture()) &&
           VerifyField<float>(verifier, VT_HUMAN_SPAWNING_DELAY, 4) &&
           VerifyField<float>(verifier, VT_REQUIRED_CONSTRUCTION_POINTS, 4) &&
           VerifyOffset(verifier, VT_CONSTRUCTION_RESOURCES) &&
           verifier.VerifyVector(construction_resources()) &&
           verifier.VerifyVectorOfTables(construction_resources()) &&
           verifier.EndTable();
  }
};

struct BuildingBuilder {
  typedef Building Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(Building::VT_CODE, code);
  }
  void add_type(BFGame::Building_Type type) {
    fbb_.AddElement<int8_t>(Building::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_texture(::flatbuffers::Offset<::flatbuffers::String> texture) {
    fbb_.AddOffset(Building::VT_TEXTURE, texture);
  }
  void add_human_spawning_delay(float human_spawning_delay) {
    fbb_.AddElement<float>(Building::VT_HUMAN_SPAWNING_DELAY, human_spawning_delay, 0.0f);
  }
  void add_required_construction_points(float required_construction_points) {
    fbb_.AddElement<float>(Building::VT_REQUIRED_CONSTRUCTION_POINTS, required_construction_points, 0.0f);
  }
  void add_construction_resources(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>> construction_resources) {
    fbb_.AddOffset(Building::VT_CONSTRUCTION_RESOURCES, construction_resources);
  }
  explicit BuildingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Building> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Building>(end);
    fbb_.Required(o, Building::VT_CODE);
    fbb_.Required(o, Building::VT_TEXTURE);
    return o;
  }
};

inline ::flatbuffers::Offset<Building> CreateBuilding(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    BFGame::Building_Type type = BFGame::Building_Type_Undefined,
    ::flatbuffers::Offset<::flatbuffers::String> texture = 0,
    float human_spawning_delay = 0.0f,
    float required_construction_points = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>> construction_resources = 0) {
  BuildingBuilder builder_(_fbb);
  builder_.add_construction_resources(construction_resources);
  builder_.add_required_construction_points(required_construction_points);
  builder_.add_human_spawning_delay(human_spawning_delay);
  builder_.add_texture(texture);
  builder_.add_code(code);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Building> CreateBuildingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    BFGame::Building_Type type = BFGame::Building_Type_Undefined,
    const char *texture = nullptr,
    float human_spawning_delay = 0.0f,
    float required_construction_points = 0.0f,
    const std::vector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>> *construction_resources = nullptr) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto texture__ = texture ? _fbb.CreateString(texture) : 0;
  auto construction_resources__ = construction_resources ? _fbb.CreateVector<::flatbuffers::Offset<BFGame::Construction_Resource_Pair>>(*construction_resources) : 0;
  return BFGame::CreateBuilding(
      _fbb,
      code__,
      type,
      texture__,
      human_spawning_delay,
      required_construction_points,
      construction_resources__);
}

struct Game_Library FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Game_LibraryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUILDINGS = 4,
    VT_RESOURCES = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>> *buildings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>> *>(VT_BUILDINGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>> *resources() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>> *>(VT_RESOURCES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUILDINGS) &&
           verifier.VerifyVector(buildings()) &&
           verifier.VerifyVectorOfTables(buildings()) &&
           VerifyOffset(verifier, VT_RESOURCES) &&
           verifier.VerifyVector(resources()) &&
           verifier.VerifyVectorOfTables(resources()) &&
           verifier.EndTable();
  }
};

struct Game_LibraryBuilder {
  typedef Game_Library Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_buildings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>>> buildings) {
    fbb_.AddOffset(Game_Library::VT_BUILDINGS, buildings);
  }
  void add_resources(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>>> resources) {
    fbb_.AddOffset(Game_Library::VT_RESOURCES, resources);
  }
  explicit Game_LibraryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Game_Library> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Game_Library>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Game_Library> CreateGame_Library(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Building>>> buildings = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BFGame::Resource>>> resources = 0) {
  Game_LibraryBuilder builder_(_fbb);
  builder_.add_resources(resources);
  builder_.add_buildings(buildings);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Game_Library> CreateGame_LibraryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<BFGame::Building>> *buildings = nullptr,
    std::vector<::flatbuffers::Offset<BFGame::Resource>> *resources = nullptr) {
  auto buildings__ = buildings ? _fbb.CreateVectorOfSortedTables<BFGame::Building>(buildings) : 0;
  auto resources__ = resources ? _fbb.CreateVectorOfSortedTables<BFGame::Resource>(resources) : 0;
  return BFGame::CreateGame_Library(
      _fbb,
      buildings__,
      resources__);
}

inline const BFGame::Game_Library *GetGame_Library(const void *buf) {
  return ::flatbuffers::GetRoot<BFGame::Game_Library>(buf);
}

inline const BFGame::Game_Library *GetSizePrefixedGame_Library(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BFGame::Game_Library>(buf);
}

inline const char *Game_LibraryIdentifier() {
  return "GLIB";
}

inline bool Game_LibraryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Game_LibraryIdentifier());
}

inline bool SizePrefixedGame_LibraryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Game_LibraryIdentifier(), true);
}

inline bool VerifyGame_LibraryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BFGame::Game_Library>(Game_LibraryIdentifier());
}

inline bool VerifySizePrefixedGame_LibraryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BFGame::Game_Library>(Game_LibraryIdentifier());
}

inline void FinishGame_LibraryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BFGame::Game_Library> root) {
  fbb.Finish(root, Game_LibraryIdentifier());
}

inline void FinishSizePrefixedGame_LibraryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BFGame::Game_Library> root) {
  fbb.FinishSizePrefixed(root, Game_LibraryIdentifier());
}

}  // namespace BFGame

#endif  // FLATBUFFERS_GENERATED_BFGAMELIB_BFGAME_H_
